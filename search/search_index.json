{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to NRV Our company holds the distinction of being the first in the world to mass-produce event-based image sensors, combined with proven expertise in machine learning hardware and software. With a primary focus on low-latency, ultra-high-speed image recognition systems, it aims to become a global leader in AI-powered image processing sensors and application systems. ADDRESS: Building B, 27 Dongtancheomdansaneop 1-ro, Hwaseong-si, Gyeonggi-do, South Korea E-MAIL: eric.ryu@nrv.kr","title":"Home"},{"location":"#welcome-to-nrv","text":"Our company holds the distinction of being the first in the world to mass-produce event-based image sensors, combined with proven expertise in machine learning hardware and software. With a primary focus on low-latency, ultra-high-speed image recognition systems, it aims to become a global leader in AI-powered image processing sensors and application systems. ADDRESS: Building B, 27 Dongtancheomdansaneop 1-ro, Hwaseong-si, Gyeonggi-do, South Korea E-MAIL: eric.ryu@nrv.kr","title":"Welcome to NRV"},{"location":"about-NRV/","text":"About NRV Our company holds the distinction of being the first in the world to mass-produce event-based image sensors, combined with proven expertise in machine learning hardware and software. With a primary focus on low-latency, ultra-high-speed image recognition systems, it aims to become a global leader in AI-powered image processing sensors and application systems. ADDRESS: Building B, 27 Dongtancheomdansaneop 1-ro, Hwaseong-si, Gyeonggi-do, South Korea E-MAIL: eric.ryu@nrv.kr","title":"About NRV"},{"location":"about-NRV/#about-nrv","text":"Our company holds the distinction of being the first in the world to mass-produce event-based image sensors, combined with proven expertise in machine learning hardware and software. With a primary focus on low-latency, ultra-high-speed image recognition systems, it aims to become a global leader in AI-powered image processing sensors and application systems. ADDRESS: Building B, 27 Dongtancheomdansaneop 1-ro, Hwaseong-si, Gyeonggi-do, South Korea E-MAIL: eric.ryu@nrv.kr","title":"About NRV"},{"location":"datasheet/DVS_FMC/","text":"Our DVS-FMC board is a specialized hardware component used in FPGA-based systems, particularly for handling MIPI signals. The board's pinmap refers to the mapping of its pins to the various signals and functionalities it supports. This includes connections for MIPI data, clock signals, reset, and possibly GPIO(General-Purpose Input/Output) for custom user functions. Understanding the pinmap is crucial for integrating the DVS-FMC board into a larger system, as it dictates how the board interfaces with the FPGA and other components, ensuring proper signal flow and operation. Download the PDF via the link: DVS-FMC Board Pinmap","title":"DVS-FMC Board Pinmap"},{"location":"ip_repo/mipi_rx_subsystem/","text":"Date Version Download Link Description of Revisions August 31, 2024 3.3 download First mipi rx subsystem IP for DVS","title":"mipi_rx_subsystem"},{"location":"projects/CIS_DVS/","text":"Zynq UltraScale+ MPSoC - ZCU106 CIS_DVS streaming Example Design This technical article provides you an overview of the CIS camera and DVS camera streaming Example design. Table of Contents Document History Introduction OS Requirements Download and Installation Steps to Operate Both Cameras 1. Document History Date Version Author Description of Revisions September 10, 2024 3.3 Mincheol Cha First CIS_DVS Example Design of ZCU106 2. Introduction [ZCU106 Evaluation Platform] The ZCU106 CIS_DVS streaming Example Design uses the following IPs along with the Zynq UltraScale+ Processing System for demonstrating Video Streaming using mipi_rx_subsystem block made by our company. Zynq UltraScale+ MPSoC Processing System (Xilinx IP) MIPI D-PHY (Xilinx IP) mipi_rx_subsystem (NRV IP) DMA/Bridge Subsystem for PCI Express (Xilinx IP) AXI IIC (Xilinx IP) AXI GPIO (Xilinx IP) Sensor Demosaic (Xilinx IP) Gamma LUT (Xilinx IP) Video Processing Subsystem (Xilinx IP) [LI-IMX274MIPI-FMC] The ZCU106 CIS_DVS streaming Example Design uses LI-IMX274MIPI-FMC for the CIS camera. Cis Camera Vendor Link 3. OS Requirements The OS requirements are as follows : The project runs on a Ubuntu host PC of 20.04 or newer. The ZCU106 board should be connected to the host PC via PCI-Express Cable. However, the Vivado bitstream generation ( and programming the board with Vitis through JTAG & UART in some cases ) can be run on a Windows PC. 4. Download and Installation The project consists of the following: Vivado Project ( Download Link ) Firmware code ( Download Link ) Host code ( Download Link ) How to Install PCIE drivers To connect the host pc with the ZCU106, downloading and installing XDMA drivers from Xilinx are required. ( Github Page ) Setting up the Working Environment Install Vivado 2021.2 , Vitis 2021.2 from Vivado Design suite . Download cis_dvs_project.zip file and unzip ( Download the project ) Open Vivado 2021.2 and run the provided TCL script (Click Tools \u2192 Run Tcl Script \u2192 Select <current_dir>/CIS_DVS.tcl ) The project will open in <current_dir>/vivado_project folder Generate Bitstream Make sure the HLS does not experience y2k22 bugs when exporting IPs such as Gamma LUT. (y2k22 bug solution link) Generate XSA file (Click File \u2192 Export \u2192 Export Hardware... \u2192 select include bitstream \u2192 write xsa_file_name) ( Download generated XSA file ) Open Vitis 2021.2 and create Application Project (Click File \u2192 New \u2192 Application Project \u2192 Create a new platform from hardware (XSA) ) Select the generated XSA file and write Application Project Name Select Empty Application(C) \u2192 Finish and the application with the platform will be created. Copy the provided firmware code to <project_name_system>/<project_name>/src ( Download firmware code ) Right click <project_name_system> on the Flow Navigator and click Build Project Download and install XDMA driver from Xilinx 5. Steps to Operate Both Cameras 1. Program the Board From here, there are two options for programming the ZCU106. Option 1: Using SD Card 1. Replace the firmware code i.e. contents of <project_name_system>/<project_name>/src with the following link: ( Download firmware code ) 2. Right click <project_name_system> on the Flow Navigator and click Build Project 3. From the Flow Navigator of the Vitis Application Project, navigate to <project_name_system>/Debug/sd_card/BOOT.bin 4. Copy the BOOT.bin onto a SD Card ( Download sample BOOT.bin ) 5. Power off the host PC and ZCU106, then insert the SD card. 6. Set the boot mode switch SW6 to ON-OFF-OFF-OFF to SD boot mode as shown in the following figure. 7. Connect the DVS Camera into HPC0 port. 8. Turn on the host PC and ZCU106 board. 9. Start up any Xilnx XDMA drivers that are necessary. Run commands such as lspci and ls /dev to check if the drivers are loaded. 10. Once the host PC is fully powered on and drivers are loaded, press the SW19 GPIO pin on the ZCU106 board. 11. Run host code on the PC. Option 2: Using Vitis Application Project 1. Connect the UART and JTAG ports to the PC via microUSB to USB cable. 2. On the host PC, open a new terminal on GTKTerm for Ubuntu OS. NOTE : If you are having PCIE issues and need to program the ZCU106 from a secondary PC ( which doesn't need to be Linux ) while the host PC is off, you can use the Vitis GUI. 3. Select Serial and Baud rate 112500. The terminal must correspond to the port of Step 1. You might want to try /dev/ttyUSB0 or /dev/ttyUSB1. 4. On the host PC, switch to the Vitis Application Project window. Right click <project_name_system> on the Flow Navigator and click Run as... \u2192 Launch Hardware 5. Check if the terminal displays the following text correctly: 6. Reboot the host pc for refreshing the PCIe connection. 7. Start up any Xilnx XDMA drivers that are necessary. Run commands such as lspci and ls /dev to check if the drivers are loaded. 8. Open GTKTerm, and repeat Step 3. Find an active serial port by pressing y in each terminal. NOTE: If ZCU106 is programmed from a secondary PC, this step can be done by simply pressing 'y' in the secondary PC's Vitis GUI terminal. 9. Run host code on the PC. 2. Run Host Code On the host PC, download MIPI2PCIE_AXIS_HOST.zip and unzip ( Download the host code ) Open a terminal and cd to the host code directory Open <host_code_dir>/src/config.hpp Run ls /dev on a separate terminal to check xdma ports. Modify the contents of config.hpp to match the results of ls /dev . Run make clean \u2192 make over the host code. Run ./main on the terminal. ./main -c : Show video from CIS camera. ./main -d : Show video from DVS camera. ( default ) ./main -s : Show video stream from both CIS and DVS cameras ./main -x : Check if DVS data input has frame skip errors ./main -w : Save data input from DVS camera in .bin file format ./main -r : Display ROI box on top of video from DVS camera Here are some reference materials you might find useful: View our DVS-MIPI Register Setfile from here . View our DVS-FMC Board Pinmap from here . View AER Packet Format from here .","title":"CIS_DVS"},{"location":"projects/CIS_DVS/#zynq-ultrascale-mpsoc-zcu106-cis_dvs-streaming-example-design","text":"This technical article provides you an overview of the CIS camera and DVS camera streaming Example design. Table of Contents Document History Introduction OS Requirements Download and Installation Steps to Operate Both Cameras","title":"Zynq UltraScale+ MPSoC - ZCU106 CIS_DVS streaming Example Design"},{"location":"projects/CIS_DVS/#1-document-history","text":"Date Version Author Description of Revisions September 10, 2024 3.3 Mincheol Cha First CIS_DVS Example Design of ZCU106","title":"1. Document History"},{"location":"projects/CIS_DVS/#2-introduction","text":"[ZCU106 Evaluation Platform] The ZCU106 CIS_DVS streaming Example Design uses the following IPs along with the Zynq UltraScale+ Processing System for demonstrating Video Streaming using mipi_rx_subsystem block made by our company. Zynq UltraScale+ MPSoC Processing System (Xilinx IP) MIPI D-PHY (Xilinx IP) mipi_rx_subsystem (NRV IP) DMA/Bridge Subsystem for PCI Express (Xilinx IP) AXI IIC (Xilinx IP) AXI GPIO (Xilinx IP) Sensor Demosaic (Xilinx IP) Gamma LUT (Xilinx IP) Video Processing Subsystem (Xilinx IP) [LI-IMX274MIPI-FMC] The ZCU106 CIS_DVS streaming Example Design uses LI-IMX274MIPI-FMC for the CIS camera. Cis Camera Vendor Link","title":"2. Introduction"},{"location":"projects/CIS_DVS/#3-os-requirements","text":"The OS requirements are as follows : The project runs on a Ubuntu host PC of 20.04 or newer. The ZCU106 board should be connected to the host PC via PCI-Express Cable. However, the Vivado bitstream generation ( and programming the board with Vitis through JTAG & UART in some cases ) can be run on a Windows PC.","title":"3. OS Requirements"},{"location":"projects/CIS_DVS/#4-download-and-installation","text":"The project consists of the following: Vivado Project ( Download Link ) Firmware code ( Download Link ) Host code ( Download Link )","title":"4. Download and Installation"},{"location":"projects/CIS_DVS/#how-to-install-pcie-drivers","text":"To connect the host pc with the ZCU106, downloading and installing XDMA drivers from Xilinx are required. ( Github Page )","title":"How to Install PCIE drivers"},{"location":"projects/CIS_DVS/#setting-up-the-working-environment","text":"Install Vivado 2021.2 , Vitis 2021.2 from Vivado Design suite . Download cis_dvs_project.zip file and unzip ( Download the project ) Open Vivado 2021.2 and run the provided TCL script (Click Tools \u2192 Run Tcl Script \u2192 Select <current_dir>/CIS_DVS.tcl ) The project will open in <current_dir>/vivado_project folder Generate Bitstream Make sure the HLS does not experience y2k22 bugs when exporting IPs such as Gamma LUT. (y2k22 bug solution link) Generate XSA file (Click File \u2192 Export \u2192 Export Hardware... \u2192 select include bitstream \u2192 write xsa_file_name) ( Download generated XSA file ) Open Vitis 2021.2 and create Application Project (Click File \u2192 New \u2192 Application Project \u2192 Create a new platform from hardware (XSA) ) Select the generated XSA file and write Application Project Name Select Empty Application(C) \u2192 Finish and the application with the platform will be created. Copy the provided firmware code to <project_name_system>/<project_name>/src ( Download firmware code ) Right click <project_name_system> on the Flow Navigator and click Build Project Download and install XDMA driver from Xilinx","title":"Setting up the Working Environment"},{"location":"projects/CIS_DVS/#5-steps-to-operate-both-cameras","text":"","title":"5. Steps to Operate Both Cameras"},{"location":"projects/CIS_DVS/#1-program-the-board","text":"From here, there are two options for programming the ZCU106. Option 1: Using SD Card 1. Replace the firmware code i.e. contents of <project_name_system>/<project_name>/src with the following link: ( Download firmware code ) 2. Right click <project_name_system> on the Flow Navigator and click Build Project 3. From the Flow Navigator of the Vitis Application Project, navigate to <project_name_system>/Debug/sd_card/BOOT.bin 4. Copy the BOOT.bin onto a SD Card ( Download sample BOOT.bin ) 5. Power off the host PC and ZCU106, then insert the SD card. 6. Set the boot mode switch SW6 to ON-OFF-OFF-OFF to SD boot mode as shown in the following figure. 7. Connect the DVS Camera into HPC0 port. 8. Turn on the host PC and ZCU106 board. 9. Start up any Xilnx XDMA drivers that are necessary. Run commands such as lspci and ls /dev to check if the drivers are loaded. 10. Once the host PC is fully powered on and drivers are loaded, press the SW19 GPIO pin on the ZCU106 board. 11. Run host code on the PC. Option 2: Using Vitis Application Project 1. Connect the UART and JTAG ports to the PC via microUSB to USB cable. 2. On the host PC, open a new terminal on GTKTerm for Ubuntu OS. NOTE : If you are having PCIE issues and need to program the ZCU106 from a secondary PC ( which doesn't need to be Linux ) while the host PC is off, you can use the Vitis GUI. 3. Select Serial and Baud rate 112500. The terminal must correspond to the port of Step 1. You might want to try /dev/ttyUSB0 or /dev/ttyUSB1. 4. On the host PC, switch to the Vitis Application Project window. Right click <project_name_system> on the Flow Navigator and click Run as... \u2192 Launch Hardware 5. Check if the terminal displays the following text correctly: 6. Reboot the host pc for refreshing the PCIe connection. 7. Start up any Xilnx XDMA drivers that are necessary. Run commands such as lspci and ls /dev to check if the drivers are loaded. 8. Open GTKTerm, and repeat Step 3. Find an active serial port by pressing y in each terminal. NOTE: If ZCU106 is programmed from a secondary PC, this step can be done by simply pressing 'y' in the secondary PC's Vitis GUI terminal. 9. Run host code on the PC.","title":"1. Program the Board"},{"location":"projects/CIS_DVS/#2-run-host-code","text":"On the host PC, download MIPI2PCIE_AXIS_HOST.zip and unzip ( Download the host code ) Open a terminal and cd to the host code directory Open <host_code_dir>/src/config.hpp Run ls /dev on a separate terminal to check xdma ports. Modify the contents of config.hpp to match the results of ls /dev . Run make clean \u2192 make over the host code. Run ./main on the terminal. ./main -c : Show video from CIS camera. ./main -d : Show video from DVS camera. ( default ) ./main -s : Show video stream from both CIS and DVS cameras ./main -x : Check if DVS data input has frame skip errors ./main -w : Save data input from DVS camera in .bin file format ./main -r : Display ROI box on top of video from DVS camera Here are some reference materials you might find useful: View our DVS-MIPI Register Setfile from here . View our DVS-FMC Board Pinmap from here . View AER Packet Format from here .","title":"2. Run Host Code"},{"location":"projects/MIPI2PCIE_AXIS/","text":"Zynq UltraScale+ MPSoC - ZCU106 MIPI2PCIE_AXIS Example Design This technical article provides you an overview of the ZCU106 MIPI2PCIE_AXIS Example design. Table of Contents Document History Introduction OS Requirements Download and Installation Steps to Operate DVS Camera 1. Document History Date Version Author Description of Revisions August 31, 2024 1.0 Soosung Kim First MIPI2PCIE_AXIS Example Design of ZCU106 2. Introduction ZCU106 Evaluation Platform The ZCU106 MIPI2PCIE_AXIS Example Design uses the following IPs along with the Zynq UltraScale+ Processing System for demonstrating Video Streaming using mipi_rx_subsystem block made by our company. Zynq UltraScale+ MPSoC Processing System ( Xilinx IP ) MIPI D-PHY ( Xilinx IP ) mipi_rx_subsystem ( NRV IP ) DMA/Bridge Subsystem for PCI Express ( Xilinx IP ) AXI IIC ( Xilinx IP ) AXI GPIO ( Xilinx IP ) 3. OS Requirements The OS requirements are as follows : The project runs on a Ubuntu host PC of 20.04 or newer. The ZCU106 board should be connected to the host PC via PCI-Express Cable. However, the Vivado bitstream generation ( and programming the board with Vitis through JTAG & UART in some cases ) can be run on a Windows PC. 4. Download and Installation The project consists of the following: Vivado Project ( Download Link ) Firmware code ( Download Link ) Host code ( Download Link ) Xilinx XDMA IP drivers ( Github Page ) How to Install PCIE drivers To connect the host pc with the ZCU106, downloading and installing XDMA drivers from Xilinx are required. ( Github Page ) Setting up the Working Environment Install Vivado 2021.2 , Vitis 2021.2 from Vivado Design suite . Download dvs_project.zip file and unzip ( Download the project ) Open Vivado 2021.2 and run the provided TCL script (Click Tools \u2192 Run Tcl Script \u2192 Select <current_dir>/CIS_DVS.tcl ) The project will open in <current_dir>/vivado_project folder Generate Bitstream Make sure the HLS does not experience y2k22 bugs when exporting IPs such as Gamma LUT. (y2k22 bug solution link) Generate XSA file (Click File \u2192 Export \u2192 Export Hardware... \u2192 select include bitstream \u2192 write xsa_file_name) ( Download generated XSA file ) Open Vitis 2021.2 and create Application Project (Click File \u2192 New \u2192 Application Project \u2192 Create a new platform from hardware (XSA) ) Select the generated XSA file and write Application Project Name Select Empty Application(C) \u2192 Finish and the application with the platform will be created. Copy the provided firmware code to <project_name_system>/<project_name>/src ( Download firmware code ) Right click <project_name_system> on the Flow Navigator and click Build Project 5. Steps to Operate DVS Camera 1. Program the Board From here, there are two options for programming the ZCU106. Option 1: Using SD Card 1. Replace the firmware code i.e. contents of <project_name_system>/<project_name>/src with the following link: ( Download firmware code ) 2. Right click <project_name_system> on the Flow Navigator and click Build Project 3. From the Flow Navigator of the Vitis Application Project, navigate to <project_name_system>/Debug/sd_card/BOOT.bin 4. Copy the BOOT.bin onto a SD Card ( Download sample BOOT.bin ) 5. Power off the host PC and ZCU106, then insert the SD card. 6. Set the boot mode switch SW6 to ON-OFF-OFF-OFF to SD boot mode as shown in the following figure. 7. Connect the DVS Camera into HPC0 port. 8. Turn on the host PC and ZCU106 board. 9. Start up any Xilnx XDMA drivers that are necessary. Run commands such as lspci and ls /dev to check if the drivers are loaded. 10. Once the host PC is fully powered on and drivers are loaded, press the SW19 GPIO pin on the ZCU106 board. 11. Run host code on the PC. Option 2: Using Vitis Application Project 1. Connect the UART and JTAG ports to the PC via microUSB to USB cable. 2. On the host PC, open a new terminal on GTKTerm for Ubuntu OS. NOTE : If you are having PCIE issues and need to program the ZCU106 from a secondary PC ( which doesn't need to be Linux ) while the host PC is off, you can use the Vitis GUI. 3. Select Serial and Baud rate 112500. The terminal must correspond to the port of Step 1. You might want to try /dev/ttyUSB0 or /dev/ttyUSB1. 4. On the host PC, switch to the Vitis Application Project window. Right click <project_name_system> on the Flow Navigator and click Run as... \u2192 Launch Hardware 5. Check if the terminal displays the following text correctly: 6. Reboot the host pc for refreshing the PCIe connection. 7. Start up any Xilnx XDMA drivers that are necessary. Run commands such as lspci and ls /dev to check if the drivers are loaded. 8. Open GTKTerm, and repeat Step 3. Find an active serial port by pressing y in each terminal. NOTE: If ZCU106 is programmed from a secondary PC, this step can be done by simply pressing 'y' in the secondary PC's Vitis GUI terminal. 9. Run host code on the PC. 2. Run Host Code On the host PC, download MIPI2PCIE_AXIS_HOST.zip and unzip ( Download the host code ) Open a terminal and cd to the host code directory Open <host_code_dir>/src/config.hpp Run ls /dev on a separate terminal to check xdma ports. Modify the contents of config.hpp to match the results of ls /dev . Run make clean \u2192 make over the host code. Run ./main on the terminal. Below figure shows the complete board setup. The video will appear as follows: Here are some reference materials you might find useful: View our DVS-MIPI Register Setfile from here . View our DVS-FMC Board Pinmap from here . View AER Packet Format from here .","title":"MIPI2PCIE_AXIS"},{"location":"projects/MIPI2PCIE_AXIS/#zynq-ultrascale-mpsoc-zcu106-mipi2pcie_axis-example-design","text":"This technical article provides you an overview of the ZCU106 MIPI2PCIE_AXIS Example design. Table of Contents Document History Introduction OS Requirements Download and Installation Steps to Operate DVS Camera","title":"Zynq UltraScale+ MPSoC - ZCU106 MIPI2PCIE_AXIS Example Design"},{"location":"projects/MIPI2PCIE_AXIS/#1-document-history","text":"Date Version Author Description of Revisions August 31, 2024 1.0 Soosung Kim First MIPI2PCIE_AXIS Example Design of ZCU106","title":"1. Document History"},{"location":"projects/MIPI2PCIE_AXIS/#2-introduction","text":"ZCU106 Evaluation Platform The ZCU106 MIPI2PCIE_AXIS Example Design uses the following IPs along with the Zynq UltraScale+ Processing System for demonstrating Video Streaming using mipi_rx_subsystem block made by our company. Zynq UltraScale+ MPSoC Processing System ( Xilinx IP ) MIPI D-PHY ( Xilinx IP ) mipi_rx_subsystem ( NRV IP ) DMA/Bridge Subsystem for PCI Express ( Xilinx IP ) AXI IIC ( Xilinx IP ) AXI GPIO ( Xilinx IP )","title":"2. Introduction"},{"location":"projects/MIPI2PCIE_AXIS/#3-os-requirements","text":"The OS requirements are as follows : The project runs on a Ubuntu host PC of 20.04 or newer. The ZCU106 board should be connected to the host PC via PCI-Express Cable. However, the Vivado bitstream generation ( and programming the board with Vitis through JTAG & UART in some cases ) can be run on a Windows PC.","title":"3. OS Requirements"},{"location":"projects/MIPI2PCIE_AXIS/#4-download-and-installation","text":"The project consists of the following: Vivado Project ( Download Link ) Firmware code ( Download Link ) Host code ( Download Link ) Xilinx XDMA IP drivers ( Github Page )","title":"4. Download and Installation"},{"location":"projects/MIPI2PCIE_AXIS/#how-to-install-pcie-drivers","text":"To connect the host pc with the ZCU106, downloading and installing XDMA drivers from Xilinx are required. ( Github Page )","title":"How to Install PCIE drivers"},{"location":"projects/MIPI2PCIE_AXIS/#setting-up-the-working-environment","text":"Install Vivado 2021.2 , Vitis 2021.2 from Vivado Design suite . Download dvs_project.zip file and unzip ( Download the project ) Open Vivado 2021.2 and run the provided TCL script (Click Tools \u2192 Run Tcl Script \u2192 Select <current_dir>/CIS_DVS.tcl ) The project will open in <current_dir>/vivado_project folder Generate Bitstream Make sure the HLS does not experience y2k22 bugs when exporting IPs such as Gamma LUT. (y2k22 bug solution link) Generate XSA file (Click File \u2192 Export \u2192 Export Hardware... \u2192 select include bitstream \u2192 write xsa_file_name) ( Download generated XSA file ) Open Vitis 2021.2 and create Application Project (Click File \u2192 New \u2192 Application Project \u2192 Create a new platform from hardware (XSA) ) Select the generated XSA file and write Application Project Name Select Empty Application(C) \u2192 Finish and the application with the platform will be created. Copy the provided firmware code to <project_name_system>/<project_name>/src ( Download firmware code ) Right click <project_name_system> on the Flow Navigator and click Build Project","title":"Setting up the Working Environment"},{"location":"projects/MIPI2PCIE_AXIS/#5-steps-to-operate-dvs-camera","text":"","title":"5. Steps to Operate DVS Camera"},{"location":"projects/MIPI2PCIE_AXIS/#1-program-the-board","text":"From here, there are two options for programming the ZCU106. Option 1: Using SD Card 1. Replace the firmware code i.e. contents of <project_name_system>/<project_name>/src with the following link: ( Download firmware code ) 2. Right click <project_name_system> on the Flow Navigator and click Build Project 3. From the Flow Navigator of the Vitis Application Project, navigate to <project_name_system>/Debug/sd_card/BOOT.bin 4. Copy the BOOT.bin onto a SD Card ( Download sample BOOT.bin ) 5. Power off the host PC and ZCU106, then insert the SD card. 6. Set the boot mode switch SW6 to ON-OFF-OFF-OFF to SD boot mode as shown in the following figure. 7. Connect the DVS Camera into HPC0 port. 8. Turn on the host PC and ZCU106 board. 9. Start up any Xilnx XDMA drivers that are necessary. Run commands such as lspci and ls /dev to check if the drivers are loaded. 10. Once the host PC is fully powered on and drivers are loaded, press the SW19 GPIO pin on the ZCU106 board. 11. Run host code on the PC. Option 2: Using Vitis Application Project 1. Connect the UART and JTAG ports to the PC via microUSB to USB cable. 2. On the host PC, open a new terminal on GTKTerm for Ubuntu OS. NOTE : If you are having PCIE issues and need to program the ZCU106 from a secondary PC ( which doesn't need to be Linux ) while the host PC is off, you can use the Vitis GUI. 3. Select Serial and Baud rate 112500. The terminal must correspond to the port of Step 1. You might want to try /dev/ttyUSB0 or /dev/ttyUSB1. 4. On the host PC, switch to the Vitis Application Project window. Right click <project_name_system> on the Flow Navigator and click Run as... \u2192 Launch Hardware 5. Check if the terminal displays the following text correctly: 6. Reboot the host pc for refreshing the PCIe connection. 7. Start up any Xilnx XDMA drivers that are necessary. Run commands such as lspci and ls /dev to check if the drivers are loaded. 8. Open GTKTerm, and repeat Step 3. Find an active serial port by pressing y in each terminal. NOTE: If ZCU106 is programmed from a secondary PC, this step can be done by simply pressing 'y' in the secondary PC's Vitis GUI terminal. 9. Run host code on the PC.","title":"1. Program the Board"},{"location":"projects/MIPI2PCIE_AXIS/#2-run-host-code","text":"On the host PC, download MIPI2PCIE_AXIS_HOST.zip and unzip ( Download the host code ) Open a terminal and cd to the host code directory Open <host_code_dir>/src/config.hpp Run ls /dev on a separate terminal to check xdma ports. Modify the contents of config.hpp to match the results of ls /dev . Run make clean \u2192 make over the host code. Run ./main on the terminal. Below figure shows the complete board setup. The video will appear as follows: Here are some reference materials you might find useful: View our DVS-MIPI Register Setfile from here . View our DVS-FMC Board Pinmap from here . View AER Packet Format from here .","title":"2. Run Host Code"},{"location":"register/DVS_MIPI/","text":"DVS-MIPI Register Set Files are configuration files used to initialize and control MIPI interfaces on FPGA-based systems. These files contain the necessary register settings to operate the MIPI interface at specific data rates\u20141GHz and 2.5GHz, respectively. Understanding and utilizing these register set files is crucial for achieving desired performance and stability. Download the PDF via the link below: - DVS-MIPI 1GHz Register Set File - DVS-MIPI 2.5GHz Register Set File","title":"DVS-MIPI Register Set File"}]}